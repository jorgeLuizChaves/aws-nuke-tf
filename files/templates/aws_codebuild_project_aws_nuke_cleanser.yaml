
version: 0.2
phases:
  install:
    on-failure: ABORT
    commands:
      - export AWS_NUKE_VERSION=$AWS_NukeVersion
      - apt-get install -y wget
      - apt-get install jq
      - wget https://github.com/rebuy-de/aws-nuke/releases/download/v$AWS_NUKE_VERSION/aws-nuke-v$AWS_NUKE_VERSION-linux-amd64.tar.gz --no-check-certificate
      - tar xvf aws-nuke-v$AWS_NUKE_VERSION-linux-amd64.tar.gz
      - chmod +x aws-nuke-v$AWS_NUKE_VERSION-linux-amd64
      - mv aws-nuke-v$AWS_NUKE_VERSION-linux-amd64 /usr/local/bin/aws-nuke
      - aws-nuke version
      - echo "Setting aws cli profile with config file for role assumption using metadata"
      - aws configure set profile.nuke.role_arn $${NukeAssumeRoleArn}
      - aws configure set profile.nuke.credential_source "EcsContainer"
      - export AWS_PROFILE=nuke
      - export AWS_DEFAULT_PROFILE=nuke
      - export AWS_SDK_LOAD_CONFIG=1
  build:
    on-failure: CONTINUE
    commands:
      - echo "Getting seed config file from S3";
      - aws s3 cp s3://$NukeS3Bucket/nuke_generic_config.yaml .
      - echo "Updating the TARGET_REGION in the generic config from the parameter"
      - sed -i "s/TARGET_REGION/$NukeTargetRegion/g" nuke_generic_config.yaml
      - echo "Getting filter/exclusion python script from S3";
      - aws s3 cp s3://$NukeS3Bucket/nuke_config_update.py .
      - echo "Getting 12-digit ID of this account"
      - account_id=$(aws sts get-caller-identity |jq -r ".Account");
      - echo "Running Config filter/update script";
      - python3 nuke_config_update.py --account $account_id --region "$NukeTargetRegion";
      - echo "Configured nuke_config.yaml";
      - echo "Running Nuke on Account";
      - |
        if [ "$AWS_NukeDryRun" = "true" ]; then
          for file in $(ls nuke_config_$NukeTargetRegion*) ; do aws-nuke -c $file --force --profile nuke |tee -a aws-nuke.log; done
        elif [ "$AWS_NukeDryRun" = "false" ]; then
          for file in $(ls nuke_config_$NukeTargetRegion*) ; do aws-nuke -c $file --force --no-dry-run --profile nuke |tee -a aws-nuke.log; done
        else
          echo "Couldn't determine Dryrun flag...exiting"
          exit 1
        fi
      - nuke_pid=$!;
      - wait $nuke_pid;
      - echo "Completed Nuke Process for account"
  post_build:
    commands:
      - echo $CODEBUILD_BUILD_SUCCEEDING
      - echo "Get current timestamp for reports naming.."
      - BLD_START_TIME=$(date -d @$(($CODEBUILD_START_TIME/1000)))
      - CURR_TIME_UTC=$(date -u)
      - |
        {
                echo "  Account Cleansing Process Failed;"
                echo    ""
                
                echo "  ----------------------------------------------------------------"
                echo "  Summary of the process:"
                echo "  ----------------------------------------------------------------"
                echo "  DryRunMode                   : $AWS_NukeDryRun"
                echo "  Account ID                   : $(aws sts get-caller-identity | jq -r .Account)"
                echo "  Target Region                : $NukeTargetRegion"
                echo "  Build State                  : $([ "$${CODEBUILD_BUILD_SUCCEEDING}" = "1" ] && echo "JOB SUCCEEDED" || echo "JOB FAILED")"
                echo "  Build ID                     : $${CODEBUILD_BUILD_ID}"
                echo "  CodeBuild Project Name       : $NukeCodeBuildProjectName"
                echo "  Process Start Time           : $${BLD_START_TIME}"
                echo "  Process End Time             : $${CURR_TIME_UTC}"
                echo "  Log Stream Path              : $NukeCodeBuildProjectName/$${CODEBUILD_LOG_PATH}"
                echo "  ----------------------------------------------------------------"
                echo "  ################# Removed the following resources #################"
                echo    ""
        } >> fail_email_template.txt
      - | 
        if [ "$CODEBUILD_BUILD_SUCCEEDING" = "0" ]; then 
          echo "Couldn't process Nuke Cleanser Exiting";
          aws sns publish --topic-arn $Publish_TopicArn --message file://fail_email_template.txt --subject "Nuke Account Cleanser Failed"
          exit 1;
        fi
      - sleep 10
      - echo "Getting CW Logs event start and stop time"
      - aws logs describe-log-streams --log-group-name $NukeCodeBuildProjectName --order-by LastEventTime --descending --max-items 1 > $account_id_logstreams.json;
      - LOG_EVENT_END_TIME=$(cat $account_id_logstreams.json |jq -r .logStreams[].lastIngestionTime);
      - LOG_EVENT_START_TIME=$(cat $account_id_logstreams.json |jq -r .logStreams[].firstEventTimestamp);
      - LOG_STREAM_NAME=$(cat $account_id_logstreams.json |jq -r .logStreams[].logStreamName);
      - echo $LOG_EVENT_END_TIME
      - echo $LOG_EVENT_START_TIME
      - echo $LOG_STREAM_NAME
      - BLD_END_TIME=$(date -d @$(($LOG_EVENT_END_TIME/1000)))
      - | 
        if [ -z "$${LOG_STREAM_NAME}" ]; then
          echo "Couldn't filter log events as params are null or empty";
          exit 0;
        else
          aws logs filter-log-events --log-group-name $NukeCodeBuildProjectName --start-time $LOG_EVENT_START_TIME --end-time $LOG_EVENT_END_TIME --log-stream-names $LOG_STREAM_NAME --filter-pattern "removed" --no-interleaved | jq -r .events[].message > log_output.txt;
        fi
      - |
        if [ -r log_output.txt ]; then
          content=$(cat log_output.txt)
          echo $content
        elif [ -f "log_output.txt" ]; then
          echo "The file log_output.txt exists but is not readable to the script."
        else
          echo "The file log_output.txt does not exist."
        fi
      - echo "Publishing Log Ouput to SNS:"
      - sub="Nuke Account Cleanser Succeeded"
      - |
        {
                echo "  Account Cleansing Process Completed;"
                echo    ""
                
                echo "  ------------------------------------------------------------------"
                echo "  Summary of the process:"
                echo "  ------------------------------------------------------------------"
                echo "  DryRunMode                   : $AWS_NukeDryRun"
                echo "  Account ID                   : $(aws sts get-caller-identity | jq -r .Account)"
                echo "  Target Region                : $NukeTargetRegion"
                echo "  Build State                  : $([ "$${CODEBUILD_BUILD_SUCCEEDING}" = "1" ] && echo "JOB SUCCEEDED" || echo "JOB FAILED")"
                echo "  Build ID                     : $${CODEBUILD_BUILD_ID}"
                echo "  CodeBuild Project Name       : $NukeCodeBuildProjectName"
                echo "  Process Start Time           : $${BLD_START_TIME}"
                echo "  Process End Time             : $${BLD_END_TIME}"
                echo "  Log Stream Path              : $NukeCodeBuildProjectName/$${CODEBUILD_LOG_PATH}"
                echo "  ------------------------------------------------------------------"
                echo "  ################ Removed the following resources #################"
                echo    ""
        } >> email_template.txt

      - cat log_output.txt >> email_template.txt
      - aws sns publish --topic-arn $Publish_TopicArn --message file://email_template.txt --subject "$sub"
      - echo "Resources Nukeable:"
      - cat aws-nuke.log | grep -F "Scan complete:"
      - echo "Total number of Resources Removed:"
      - cat aws-nuke.log | grep -c " - removed" || echo "Nothing removed yet"
      - echo "List of Resources Deleted today:"
      - cat aws-nuke.log | grep -F " - removed" || echo "Nothing deleted yet" 